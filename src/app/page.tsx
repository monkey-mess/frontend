import Chatting from "@/pages/chatting/ui/Chatting";
export default function Home() {
  return (
    <div className="app">
      <Chatting />
      {}
    </div>
  );
}

/*

Структуры данных:

User{ // Profile {
  usernameID : string; // строковое id профиля, везде используется как ссылка на него
  username: string;
  avatarURL : string;
}

Message{
  senderID : number;
  // id (UUIDE) профиля отправителя, по нему, чтобы не загружать каждый 
  // раз все поля профиля будет фетчиться профиль (в первый раз по сети, потом - из кэша)
  texg : string; // сам текст сообщения
}

ChatPreview { // превью чата (кнопка для открытия самого чата).
  id: number; // id профиля (или чата), отображающий с кем мы общаемся.
  lastMessage: string | null; // последнее сообщение добавил null на всякий, вообще - он не нужен
  // нужно подумать где оно будет храниться - в кэше или фетчиться

  username: string; // возможно не нужные поля, т.к есть id, по которому можно их фетчить
  avatarURL?: string; // возможно не нужные поля, т.к есть id, по которому можно их фетчить
}


Нужно ли этот интерфейс ? Оно полностью копирует User, 
просто в нём меньше информации (только нужная для отображения в сообщении)
Хотя оно полезно, если профиль содержит много информации
(в тг в профиле лежат дата рождения, "о себе", много фоток, посты, подарки и куча другого)

MessageUser {
  username: string;
  avatarURL?: string;
}




В messageCanvas мы делаем запрос к бд с сообщениями чата
Получаем messageList : IMessage[]; (внутри находится текст и строка-имя отправителя)
Рендерим каждое сообщение, обращаясь к каждому элементу messageList

В каждом сообщении отображается текст из messageList[i]
И делается запрос на получении необходимой информации о пользователе для отображения:
 -аватарки
 -положения в чате (пользователь справа, остальные - слева)
 -ссылки на пользователя при клике на аву


При заходе во вкладку сообщений пользователю не должна сразу прилетать вся база данных
сообщений - должны прилетать последние X сообщений. 
Как это реализовать?

1) 
--  Все сообщения, которые получил клиент будут храниться в локалсторадже (мб будут стираться 
    при закрытии вкладки
--  На бэке сообщения хранятся в базе данных, где их уникальный id - номер сообщения в чате
--  Есть микросервис, возвращающий сообщения с X * (K-1) до X * K / например:
    Если мы зададим X = 30 , то если в чате 85 сообщений, сервис вернет
    или  60 - 85 или 55 - 85  
--  Как только пользователь прокрутит до определенного сообщения, идёт запрос на более старые сообщения

2) ну я хз как еще можно ток если третью сноску поменять

плюс к тому же сообщения должны отображаться снизу вверх - как это сделать?

  NEED TO LEARN: 
  UUID
  Redux
  RTK Query















  */
